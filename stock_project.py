# -*- coding: utf-8 -*-
"""AI STOCK PROJECT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-ds9JNuQlYX04_KzYpP1185HqDU-I1RO

# **Using Brittania Stocks for the period of 20 years**
"""

import pandas as pd
data = pd.read_csv('BRITANNIA.csv')  #20 years stock data from (2000-2021)
data

"""**Data Normalization**"""

data.isnull().sum()

"""**Whole Statistics of Data**"""

data.describe()

"""**Converting Date Column as Index**"""

#setting index as date
data['Date'] = pd.to_datetime(data.Date)
data.index = data['Date']
data

data.index = (data.index - pd.to_datetime('2000-01-03')).days

data

"""**Feature Selection**"""

import numpy as np
y = np.asarray(data['Close'])
X = np.asarray(data.index.values)

"""**Plotting our Initial Dataset to show prices change day-by-day**


"""

import matplotlib.pyplot as plt

X1=data['Date']
Y1=data['Close']
plt.plot(X1,Y1)
plt.title("BRITANNIA Stock Prices over the period of 20 years")
plt.ylabel(" Close Price")
plt.xlabel("Date")
plt.show()

"""**Plotting our Dataset with Moving Average**"""

import matplotlib.pyplot as plt
from matplotlib import style
import seaborn as sns

plt.figure(figsize=(10,6))
close = data['Open']
mavg = close.rolling(window=100).mean()
plt.style.use('fivethirtyeight')

close.plot(label='Open')
mavg.plot(label='mavg')
plt.title('Brittania Company Stocks Close Prices with Moving Average')
plt.legend()

"""**Company Return Rate**


"""

returns = close / close.shift(1) - 1
plt.figure(figsize=(10,6))
returns.plot(label='return')
plt.title('Company Return rate')

from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures

#Data splitting for Training and Testing
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

"""# **Applying Polynomial Regression**"""

#function to calculate compound annual growth rate
def CAGR(first, last, periods):
    return ((last/first)**(1/periods)-1) * 100

regression_model = LinearRegression()
poly = PolynomialFeatures(4)

X_transform = poly.fit_transform(X.reshape(-1, 1))
regression_model.fit(X_transform, y.reshape(-1, 1))
y_learned = regression_model.predict(X_transform)

newindex = np.asarray(pd.RangeIndex(start=X[-1], stop=X[-1] + 365))

X_extended_transform = poly.fit_transform(newindex.reshape(-1, 1))
y_predict = regression_model.predict(X_extended_transform)

print ("Closing price at 2022 would be around ", y_predict[-1])

X = pd.to_datetime(data.index, origin='2000-01-03', unit='D')
future_x = pd.to_datetime(newindex, origin='2000-01-03', unit='D')

print ('Your investments will have a CAGR of ',(CAGR(y[-1], y_predict[-1], 1)), '%')

y_predict

"""Plotting The overall Graph for the **Future Forecast VS Stock Prices History**"""

from matplotlib.pylab import rcParams
rcParams['figure.figsize'] = 20,10

plt.figure(figsize=(16,8))
plt.plot(X,data['Close'], label='Close Price History')
plt.plot(X,y_learned, color='r', label='Mathematical Model')
plt.plot(future_x,y_predict, color='g', label='Future Predictions')
plt.suptitle('Stock Market Predictions', fontsize=16)

fig = plt.gcf()
fig.canvas.set_window_title('Stock Market Predictions')
plt.legend()

#display the graph
plt.show()

"""# **Prophet Library**"""

from fbprophet import Prophet

# preparing data. Prophet only understands y and ds columns. Hence we need to rename
data.rename(columns={'Close': 'y', 'Date': 'ds'}, inplace=True)

model = Prophet()
model.fit(data)

# Create a future data frame of future dates. Here 365 is approximate number of days in 1 year time frame.
future = model.make_future_dataframe(periods=365)

# Prediction for future dates.
forecast = model.predict(future)

# forecast has number of various columns. In this exercise we are considering only two of them.
# ds is a date column and yhat is the median predicated value.
forecast_valid = forecast[['ds','yhat']][:]
forecast_valid.rename(columns={'yhat': 'y'}, inplace=True)

#print the last predicted value
print ("Closing price at 2022 would be around ", forecast_valid[['y']].iloc[-1])
print("_________________________________________________________________")

#print CAGR for next year at Date 29-April-2022.
print ('Your investments will have a CAGR of ',(CAGR(data['y'].iloc[-1], forecast_valid[['y']].iloc[-1], 1)), '%')

# create a date index for input data frame.
data['Date'] = pd.to_datetime(data.ds)
data.index = data['Date']

# Create a date index for forecast data frame.
forecast_valid['Date'] = pd.to_datetime(forecast_valid.ds)
forecast_valid.index = forecast_valid['Date']

"""Plotting the Graph by using **Prophet Library**"""

plt.figure(figsize=(16,8))
plt.plot(data['y'], label='Close Price History')
plt.plot(forecast_valid[['y']], label='Future Predictions')
plt.suptitle('Stock Market Predictions "BRITTANIA"', fontsize=16)

#set the title of the graph window
fig = plt.gcf()
fig.canvas.set_window_title('Stock Market Predictions')

plt.legend()
plt.show()